function createElemWithText(elementType = "p", textContent = "", className = "") {
    const element = document.createElement(elementType);
    element.textContent = textContent;
    if (className) element.className = className;
    return element;
}




function createSelectOptions(users) {
    if (!users) return undefined;

    return users.map(user => {
        const option = document.createElement('option');
        option.value = user.id;
        option.textContent = user.name;
        return option;
    });
}




function toggleCommentSection(postId) {
    if (!postId) return;

    const section = document.querySelector(`section[data-post-id="${postId}"]`);
    if (section) section.classList.toggle('hide');
    return section;
}




function toggleCommentButton(postId) {
    if (!postId) return;

    const button = document.querySelector(`button[data-post-id="${postId}"]`);
    if (button) button.textContent = button.textContent === 'Show Comments' ? 'Hide Comments' : 'Show Comments';
    return button;
}




function deleteChildElements(parentElement) {
    if (!parentElement || !(parentElement instanceof Element)) {
        console.error('Invalid parent element provided');
        return;
    }

    let child = parentElement.lastElementChild;

    while (child) {
        parentElement.removeChild(child);
        child = parentElement.lastElementChild;
    }

    return parentElement;
}





function addButtonListeners() {
    const buttons = document.querySelectorAll('main button');
    
    buttons.forEach(button => {
        const postId = button.dataset.postId;
        if (postId) {
            const clickHandler = function(event) {
                toggleComments(event, postId);
            };
            button.addEventListener('click', clickHandler);
        }
    });

    return buttons;
}




function toggleComments(event, postId) {
    const section = toggleCommentSection(postId);
    const button = toggleCommentButton(postId);
    
    return [section, button];
}




function removeButtonListeners() {
    const buttons = document.querySelectorAll('main button');
    
    buttons.forEach(button => {
        const postId = button.dataset.postId;
        if (postId) {
            const clickHandler = function(event) {
                toggleComments(event, postId);
            };
            button.removeEventListener('click', clickHandler);
        }
    });
    
    return buttons;
}



function createComments(comments) {
    if (!comments) return undefined;

    const fragment = document.createDocumentFragment();
    
    comments.forEach(comment => {
        const article = document.createElement('article');
        
        const h3 = createElemWithText('h3', comment.name);
        const p1 = createElemWithText('p', comment.body);
        const p2 = createElemWithText('p', `From: ${comment.email}`);
        
        article.appendChild(h3);
        article.appendChild(p1);
        article.appendChild(p2);
        
        fragment.appendChild(article);
    });
    
    return fragment;
}

function populateSelectMenu(users) {
    if (!users) return;

    const selectMenu = document.getElementById('selectMenu');
    if (!selectMenu) return;

    const options = createSelectOptions(users);

    options.forEach(option => {
        selectMenu.appendChild(option);
    });

    return selectMenu;
}

async function getUsers() {
    try {
        const response = await fetch('https://jsonplaceholder.typicode.com/users');
        if (!response.ok) throw new Error('Network response was not ok');
        const users = await response.json();
        return users;
    } catch (error) {
        console.error('Error fetching users:', error);
        return [];
    }
}

async function getUserPosts(userId) {
    if (!userId) return undefined;

    try {
        const response = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const posts = await response.json();
        return posts;
    } catch (error) {
        console.error('Error fetching user posts:', error);
        return [];
    }
}

async function getUser(userId) {
    if (!userId) return undefined;

    try {
        const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const user = await response.json();
        return user;
    } catch (error) {
        console.error('Error fetching user data:', error);
        return null;
    }
}

async function getPostComments(postId) {
    if (!postId) return undefined;

    try {
        const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`);
        if (!response.ok) throw new Error('Network response was not ok');
        const comments = await response.json();
        return comments;
    } catch (error) {
        console.error('Error fetching post comments:', error);
        return [];
    }
}

async function displayComments(postId) {
    if (!postId) return undefined;

    const section = document.createElement('section');
    section.dataset.postId = postId;
    section.classList.add('comments', 'hide');

    try {
        const comments = await getPostComments(postId);
        const fragment = createComments(comments);
        section.appendChild(fragment);
    } catch (error) {
        console.error('Error fetching or creating comments:', error);
    }

    return section;
}





async function createPosts(posts) {
    if (!posts) return undefined;

    const fragment = document.createDocumentFragment();

    for (const post of posts) {
        const article = document.createElement('article');
        const h2 = createElemWithText('h2', post.title);
        const pBody = createElemWithText('p', post.body);
        const pPostId = createElemWithText('p', `Post ID: ${post.id}`);
        const author = await getUser(post.userId);
        const pAuthor = createElemWithText('p', `Author: ${author.name} with ${author.company.name}`);
        const pCatchPhrase = createElemWithText('p', `Company Catchphrase: "${author.company.catchPhrase}"`);
        const button = document.createElement('button');
        button.textContent = 'Show Comments';
        button.dataset.postId = post.id;
        const section = await displayComments(post.id);

        article.appendChild(h2);
        article.appendChild(pBody);
        article.appendChild(pPostId);
        article.appendChild(pAuthor);
        article.appendChild(pCatchPhrase);
        article.appendChild(button);
        article.appendChild(section);

        fragment.appendChild(article);
    }

    return fragment;
}




async function displayPosts(posts) {
    const mainElement = document.querySelector('main');
    const element = posts ? await createPosts(posts) : createElemWithText('p', 'No posts available.');

    mainElement.appendChild(element);
    return element;
}




toggleComments = (event, postId) => {
    if (!event || !postId) return;

    event.target.listener = true;

    const section = toggleCommentSection(postId);
    const button = toggleCommentButton(postId);

    return [section, button];
}



async function refreshPosts(posts) {
    if (!posts) return undefined;

    const buttonsBefore = removeButtonListeners();
    const main = deleteChildElements(document.querySelector('main'));
    const fragment = await displayPosts(posts);
    const buttonsAfter = addButtonListeners();

    return [buttonsBefore, main, fragment, buttonsAfter];
}



async function selectMenuChangeEventHandler(event) {
    if (!event || !event.target) return;

    const selectMenu = document.getElementById('selectMenu');
    if (!selectMenu) return;

    selectMenu.disabled = true;

    const userId = event.target.value || 1;

    try {
        const posts = await getUserPosts(userId);
        const refreshPostsArray = await refreshPosts(posts);
        selectMenu.disabled = false;
        return [userId, posts, refreshPostsArray];
    } catch (error) {
        console.error('Error fetching posts or refreshing:', error);
        selectMenu.disabled = false;
    }
}



async function initPage() {
    const users = await getUsers();
    const select = populateSelectMenu(users);
    return [users, select];
}



function initApp() {
    initPage().then(() => {
        const selectMenu = document.getElementById('selectMenu');
        selectMenu.addEventListener('change', selectMenuChangeEventHandler);
    });
}


